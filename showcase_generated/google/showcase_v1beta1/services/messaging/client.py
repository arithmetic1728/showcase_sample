# -*- coding: utf-8 -*-

# Copyright (C) 2019  Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from collections import OrderedDict
from typing import Dict, Sequence, Tuple, Type, Union
import pkg_resources

import google.api_core.client_options as ClientOptions # type: ignore
from google.api_core import exceptions                 # type: ignore
from google.api_core import gapic_v1                   # type: ignore
from google.api_core import retry as retries           # type: ignore
from google.auth import credentials                    # type: ignore
from google.oauth2 import service_account              # type: ignore

from google.api_core import operation
from google.protobuf import field_mask_pb2 as field_mask  # type: ignore
from google.protobuf import timestamp_pb2 as timestamp  # type: ignore
from google.showcase_v1beta1.services.messaging import pagers
from google.showcase_v1beta1.types import messaging

from .transports.base import MessagingTransport
from .transports.grpc import MessagingGrpcTransport


class MessagingClientMeta(type):
    """Metaclass for the Messaging client.

    This provides class-level methods for building and retrieving
    support objects (e.g. transport) without polluting the client instance
    objects.
    """
    _transport_registry = OrderedDict()  # type: Dict[str, Type[MessagingTransport]]
    _transport_registry['grpc'] = MessagingGrpcTransport

    def get_transport_class(cls,
            label: str = None,
            ) -> Type[MessagingTransport]:
        """Return an appropriate transport class.

        Args:
            label: The name of the desired transport. If none is
                provided, then the first transport in the registry is used.

        Returns:
            The transport class to use.
        """
        # If a specific transport is requested, return that one.
        if label:
            return cls._transport_registry[label]

        # No transport is requested; return the default (that is, the first one
        # in the dictionary).
        return next(iter(cls._transport_registry.values()))


class MessagingClient(metaclass=MessagingClientMeta):
    """A simple messaging service that implements chat rooms and
    profile posts.
    This messaging service showcases the features that API clients
    generated by gapic-generators implement.
    """

    DEFAULT_OPTIONS = ClientOptions.ClientOptions(api_endpoint='localhost:7469')

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        """Creates an instance of this client using the provided credentials
        file.

        Args:
            filename (str): The path to the service account private key json
                file.
            args: Additional arguments to pass to the constructor.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            {@api.name}: The constructed client.
        """
        credentials = service_account.Credentials.from_service_account_file(
            filename)
        kwargs['credentials'] = credentials
        return cls(*args, **kwargs)

    from_service_account_json = from_service_account_file

    @staticmethod
    def room_path(room_id: str,) -> str:
        """Return a fully-qualified room string."""
        return "rooms/{room_id}".format(room_id=room_id, )
    @staticmethod
    def blurb_path(room_id: str,blurb_id: str,) -> str:
        """Return a fully-qualified blurb string."""
        return "rooms/{room_id}/blurbs/{blurb_id}".format(room_id=room_id, blurb_id=blurb_id, )

    def __init__(self, *,
            credentials: credentials.Credentials = None,
            transport: Union[str, MessagingTransport] = None,
            client_options: ClientOptions = DEFAULT_OPTIONS,
            ) -> None:
        """Instantiate the messaging client.

        Args:
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            transport (Union[str, ~.MessagingTransport]): The
                transport to use. If set to None, a transport is chosen
                automatically.
            client_options (ClientOptions): Custom options for the client.
        """
        if isinstance(client_options, dict):
            client_options = ClientOptions.from_dict(client_options)

        # Save or instantiate the transport.
        # Ordinarily, we provide the transport, but allowing a custom transport
        # instance provides an extensibility point for unusual situations.
        if isinstance(transport, MessagingTransport):
            if credentials:
                raise ValueError('When providing a transport instance, '
                                 'provide its credentials directly.')
            self._transport = transport
        else:
            Transport = type(self).get_transport_class(transport)
            self._transport = Transport(
                credentials=credentials,
                host=client_options.api_endpoint or 'localhost:7469',
            )

    def create_room(self,
            request: messaging.CreateRoomRequest = None,
            *,
            display_name: str = None,
            description: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.Room:
        r"""Creates a room.

        Args:
            request (:class:`~.messaging.CreateRoomRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\CreateRoom method.
            display_name (:class:`str`):
                The human readable name of the chat
                room.
                This corresponds to the ``room.display_name`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            description (:class:`str`):
                The description of the chat room.
                This corresponds to the ``room.description`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.Room:
                A chat room.
        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([display_name, description]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.CreateRoomRequest(request)
        if display_name is not None:
            request.room.display_name = display_name
        if description is not None:
            request.room.description = description

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.create_room,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def get_room(self,
            request: messaging.GetRoomRequest = None,
            *,
            name: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.Room:
        r"""Retrieves the Room with the given resource name.

        Args:
            request (:class:`~.messaging.GetRoomRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\GetRoom method.
            name (:class:`str`):
                The resource name of the requested
                room.
                This corresponds to the ``name`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.Room:
                A chat room.
        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([name]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.GetRoomRequest(request)
        if name is not None:
            request.name = name

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.get_room,
            default_timeout=None,
            client_info=_client_info,
        )

        # Certain fields should be provided within the metadata header;
        # add these here.
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                ('name', request.name),
            )),
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def update_room(self,
            request: messaging.UpdateRoomRequest = None,
            *,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.Room:
        r"""Updates a room.

        Args:
            request (:class:`~.messaging.UpdateRoomRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\UpdateRoom method.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.Room:
                A chat room.
        """
        # Create or coerce a protobuf request object.
        request = messaging.UpdateRoomRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.update_room,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def delete_room(self,
            request: messaging.DeleteRoomRequest = None,
            *,
            name: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> None:
        r"""Deletes a room and all of its blurbs.

        Args:
            request (:class:`~.messaging.DeleteRoomRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\DeleteRoom method.
            name (:class:`str`):
                The resource name of the requested
                room.
                This corresponds to the ``name`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.
        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([name]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.DeleteRoomRequest(request)
        if name is not None:
            request.name = name

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.delete_room,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    def list_rooms(self,
            request: messaging.ListRoomsRequest = None,
            *,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> pagers.ListRoomsPager:
        r"""Lists all chat rooms.

        Args:
            request (:class:`~.messaging.ListRoomsRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\ListRooms method.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.pagers.ListRoomsPager:
                The response message for the
                google.showcase.v1beta1.Messaging\ListRooms
                method.
                Iterating over this object will yield
                results and resolve additional pages
                automatically.

        """
        # Create or coerce a protobuf request object.
        request = messaging.ListRoomsRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.list_rooms,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # This method is paged; wrap the response in a pager, which provides
        # an `__iter__` convenience method.
        response = pagers.ListRoomsPager(
            method=rpc,
            request=request,
            response=response,
        )

        # Done; return the response.
        return response

    def create_blurb(self,
            request: messaging.CreateBlurbRequest = None,
            *,
            parent: str = None,
            user: str = None,
            text: str = None,
            image: bytes = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.Blurb:
        r"""Creates a blurb. If the parent is a room, the blurb
        is understood to be a message in that room. If the
        parent is a profile, the blurb is understood to be a
        post on the profile.

        Args:
            request (:class:`~.messaging.CreateBlurbRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\CreateBlurb method.
            parent (:class:`str`):
                The resource name of the chat room or
                user profile that this blurb will be
                tied to.
                This corresponds to the ``parent`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            user (:class:`str`):
                The resource name of the blurb's
                author.
                This corresponds to the ``blurb.user`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            text (:class:`str`):
                The textual content of this blurb.
                This corresponds to the ``blurb.text`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            image (:class:`bytes`):
                The image content of this blurb.
                This corresponds to the ``blurb.image`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.Blurb:
                This protocol buffer message
                represents a blurb sent to a chat room
                or posted on a user profile.

        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([parent, user, text, image]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.CreateBlurbRequest(request)
        if parent is not None:
            request.parent = parent
        if user is not None:
            request.blurb.user = user
        if text is not None:
            request.blurb.text = text
        if image is not None:
            request.blurb.image = image

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.create_blurb,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def get_blurb(self,
            request: messaging.GetBlurbRequest = None,
            *,
            name: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.Blurb:
        r"""Retrieves the Blurb with the given resource name.

        Args:
            request (:class:`~.messaging.GetBlurbRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\GetBlurb method.
            name (:class:`str`):
                The resource name of the requested
                blurb.
                This corresponds to the ``name`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.Blurb:
                This protocol buffer message
                represents a blurb sent to a chat room
                or posted on a user profile.

        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([name]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.GetBlurbRequest(request)
        if name is not None:
            request.name = name

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.get_blurb,
            default_timeout=None,
            client_info=_client_info,
        )

        # Certain fields should be provided within the metadata header;
        # add these here.
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                ('name', request.name),
            )),
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def update_blurb(self,
            request: messaging.UpdateBlurbRequest = None,
            *,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.Blurb:
        r"""Updates a blurb.

        Args:
            request (:class:`~.messaging.UpdateBlurbRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\UpdateBlurb method.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.Blurb:
                This protocol buffer message
                represents a blurb sent to a chat room
                or posted on a user profile.

        """
        # Create or coerce a protobuf request object.
        request = messaging.UpdateBlurbRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.update_blurb,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def delete_blurb(self,
            request: messaging.DeleteBlurbRequest = None,
            *,
            name: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> None:
        r"""Deletes a blurb.

        Args:
            request (:class:`~.messaging.DeleteBlurbRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\DeleteBlurb method.
            name (:class:`str`):
                The resource name of the requested
                blurb.
                This corresponds to the ``name`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.
        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([name]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.DeleteBlurbRequest(request)
        if name is not None:
            request.name = name

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.delete_blurb,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

    def list_blurbs(self,
            request: messaging.ListBlurbsRequest = None,
            *,
            parent: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> pagers.ListBlurbsPager:
        r"""Lists blurbs for a specific chat room or user profile
        depending on the parent resource name.

        Args:
            request (:class:`~.messaging.ListBlurbsRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\ListBlurbs method.
            parent (:class:`str`):
                The resource name of the requested
                room or profile whos blurbs to list.
                This corresponds to the ``parent`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.pagers.ListBlurbsPager:
                The response message for the
                google.showcase.v1beta1.Messaging\ListBlurbs
                method.
                Iterating over this object will yield
                results and resolve additional pages
                automatically.

        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([parent]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.ListBlurbsRequest(request)
        if parent is not None:
            request.parent = parent

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.list_blurbs,
            default_timeout=None,
            client_info=_client_info,
        )

        # Certain fields should be provided within the metadata header;
        # add these here.
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                ('parent', request.parent),
            )),
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # This method is paged; wrap the response in a pager, which provides
        # an `__iter__` convenience method.
        response = pagers.ListBlurbsPager(
            method=rpc,
            request=request,
            response=response,
        )

        # Done; return the response.
        return response

    def search_blurbs(self,
            request: messaging.SearchBlurbsRequest = None,
            *,
            query: str = None,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> operation.Operation:
        r"""This method searches through all blurbs across all
        rooms and profiles for blurbs containing to words found
        in the query. Only posts that contain an exact match of
        a queried word will be returned.

        Args:
            request (:class:`~.messaging.SearchBlurbsRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\SearchBlurbs method.
            query (:class:`str`):
                The query used to search for blurbs
                containing to words of this string. Only
                posts that contain an exact match of a
                queried word will be returned.
                This corresponds to the ``query`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.operation.Operation:
                An object representing a long-running operation.

                The result type for the operation will be
                :class:``~.messaging.SearchBlurbsResponse``: The
                operation response message for the
                google.showcase.v1beta1.Messaging\SearchBlurbs method.

        """
        # Create or coerce a protobuf request object.
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([query]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        # If we have keyword arguments corresponding to fields on the
        # request, apply these.
        request = messaging.SearchBlurbsRequest(request)
        if query is not None:
            request.query = query

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.search_blurbs,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Wrap the response in an operation future.
        response = operation.from_gapic(
            response,
            self._transport.operations_client,
            messaging.SearchBlurbsResponse,
            metadata_type=messaging.SearchBlurbsMetadata,
        )

        # Done; return the response.
        return response

    def stream_blurbs(self,
            request: messaging.StreamBlurbsRequest = None,
            *,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.StreamBlurbsResponse:
        r"""This returns a stream that emits the blurbs that are
        created for a particular chat room or user profile.

        Args:
            request (:class:`~.messaging.StreamBlurbsRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\StreamBlurbs method.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.StreamBlurbsResponse:
                The response message for the
                google.showcase.v1beta1.Messaging\StreamBlurbs
                method.

        """
        # Create or coerce a protobuf request object.
        request = messaging.StreamBlurbsRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.stream_blurbs,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def send_blurbs(self,
            request: messaging.CreateBlurbRequest = None,
            *,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.SendBlurbsResponse:
        r"""This is a stream to create multiple blurbs. If an
        invalid blurb is requested to be created, the stream
        will close with an error.

        Args:
            request (:class:`~.messaging.CreateBlurbRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\CreateBlurb method.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.SendBlurbsResponse:
                The response message for the
                google.showcase.v1beta1.Messaging\SendBlurbs
                method.

        """
        # Create or coerce a protobuf request object.
        request = messaging.CreateBlurbRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.send_blurbs,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response

    def connect(self,
            request: messaging.ConnectRequest = None,
            *,
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> messaging.StreamBlurbsResponse:
        r"""This method starts a bidirectional stream that
        receives all blurbs that are being created after the
        stream has started and sends requests to create blurbs.
        If an invalid blurb is requested to be created, the
        stream will close with an error.

        Args:
            request (:class:`~.messaging.ConnectRequest`):
                The request object. The request message for the
                google.showcase.v1beta1.Messaging\Connect method.
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.messaging.StreamBlurbsResponse:
                The response message for the
                google.showcase.v1beta1.Messaging\StreamBlurbs
                method.

        """
        # Create or coerce a protobuf request object.
        request = messaging.ConnectRequest(request)

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.connect,
            default_timeout=None,
            client_info=_client_info,
        )

        # Send the request.
        response = rpc(
            request,
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )

        # Done; return the response.
        return response





try:
    _client_info = gapic_v1.client_info.ClientInfo(
        gapic_version=pkg_resources.get_distribution(
            'google-showcase',
        ).version,
    )
except pkg_resources.DistributionNotFound:
    _client_info = gapic_v1.client_info.ClientInfo()


__all__ = (
    'MessagingClient',
)
