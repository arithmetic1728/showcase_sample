# -*- coding: utf-8 -*-

# Copyright (C) 2019  Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import Callable, Dict

from google.api_core import grpc_helpers   # type: ignore
from google.api_core import operations_v1  # type: ignore
from google.auth import credentials        # type: ignore

import grpc  # type: ignore

from google.longrunning import operations_pb2 as operations  # type: ignore
from google.protobuf import empty_pb2 as empty  # type: ignore
from google.showcase_v1beta1.types import messaging

from .base import MessagingTransport


class MessagingGrpcTransport(MessagingTransport):
    """gRPC backend transport for Messaging.

    A simple messaging service that implements chat rooms and
    profile posts.
    This messaging service showcases the features that API clients
    generated by gapic-generators implement.

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends protocol buffers over the wire using gRPC (which is built on
    top of HTTP/2); the ``grpcio`` package must be installed.
    """
    def __init__(self, *,
            host: str = 'localhost:7469',
            credentials: credentials.Credentials = None,
            channel: grpc.Channel = None) -> None:
        """Instantiate the transport.

        Args:
            host (Optional[str]): The hostname to connect to.
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
                This argument is ignored if ``channel`` is provided.
            channel (Optional[grpc.Channel]): A ``Channel`` instance through
                which to make calls.
        """
        # Sanity check: Ensure that channel and credentials are not both
        # provided.
        if channel:
            credentials = False

        # Run the base constructor.
        super().__init__(host=host, credentials=credentials)
        self._stubs = {}  # type: Dict[str, Callable]

        # If a channel was explicitly provided, set it.
        if channel:
            self._grpc_channel = channel

    @property
    def grpc_channel(self) -> grpc.Channel:
        """Create the channel designed to connect to this service.

        This property caches on the instance; repeated calls return
        the same channel.
        """
        # Sanity check: Only create a new channel if we do not already
        # have one.
        if not hasattr(self, '_grpc_channel'):
            self._grpc_channel = grpc_helpers.create_channel(
                self._host,
                credentials=self._credentials,
                scopes=self.AUTH_SCOPES,
            )

        # Return the channel from cache.
        return self._grpc_channel

    @property
    def operations_client(self) -> operations_v1.OperationsClient:
        """Create the client designed to process long-running operations.

        This property caches on the instance; repeated calls return the same
        client.
        """
        # Sanity check: Only create a new client if we do not already have one.
        if 'operations_client' not in self.__dict__:
            self.__dict__['operations_client'] = operations_v1.OperationsClient(
                self.grpc_channel
            )

        # Return the client from cache.
        return self.__dict__['operations_client']

    @property
    def create_room(self) -> Callable[
            [messaging.CreateRoomRequest],
            messaging.Room]:
        r"""Return a callable for the create room method over gRPC.

        Creates a room.

        Returns:
            Callable[[~.CreateRoomRequest],
                    ~.Room]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'create_room' not in self._stubs:
            self._stubs['create_room'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/CreateRoom',
                request_serializer=messaging.CreateRoomRequest.serialize,
                response_deserializer=messaging.Room.deserialize,
            )
        return self._stubs['create_room']

    @property
    def get_room(self) -> Callable[
            [messaging.GetRoomRequest],
            messaging.Room]:
        r"""Return a callable for the get room method over gRPC.

        Retrieves the Room with the given resource name.

        Returns:
            Callable[[~.GetRoomRequest],
                    ~.Room]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'get_room' not in self._stubs:
            self._stubs['get_room'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/GetRoom',
                request_serializer=messaging.GetRoomRequest.serialize,
                response_deserializer=messaging.Room.deserialize,
            )
        return self._stubs['get_room']

    @property
    def update_room(self) -> Callable[
            [messaging.UpdateRoomRequest],
            messaging.Room]:
        r"""Return a callable for the update room method over gRPC.

        Updates a room.

        Returns:
            Callable[[~.UpdateRoomRequest],
                    ~.Room]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'update_room' not in self._stubs:
            self._stubs['update_room'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/UpdateRoom',
                request_serializer=messaging.UpdateRoomRequest.serialize,
                response_deserializer=messaging.Room.deserialize,
            )
        return self._stubs['update_room']

    @property
    def delete_room(self) -> Callable[
            [messaging.DeleteRoomRequest],
            empty.Empty]:
        r"""Return a callable for the delete room method over gRPC.

        Deletes a room and all of its blurbs.

        Returns:
            Callable[[~.DeleteRoomRequest],
                    ~.Empty]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'delete_room' not in self._stubs:
            self._stubs['delete_room'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/DeleteRoom',
                request_serializer=messaging.DeleteRoomRequest.serialize,
                response_deserializer=empty.Empty.FromString,
            )
        return self._stubs['delete_room']

    @property
    def list_rooms(self) -> Callable[
            [messaging.ListRoomsRequest],
            messaging.ListRoomsResponse]:
        r"""Return a callable for the list rooms method over gRPC.

        Lists all chat rooms.

        Returns:
            Callable[[~.ListRoomsRequest],
                    ~.ListRoomsResponse]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'list_rooms' not in self._stubs:
            self._stubs['list_rooms'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/ListRooms',
                request_serializer=messaging.ListRoomsRequest.serialize,
                response_deserializer=messaging.ListRoomsResponse.deserialize,
            )
        return self._stubs['list_rooms']

    @property
    def create_blurb(self) -> Callable[
            [messaging.CreateBlurbRequest],
            messaging.Blurb]:
        r"""Return a callable for the create blurb method over gRPC.

        Creates a blurb. If the parent is a room, the blurb
        is understood to be a message in that room. If the
        parent is a profile, the blurb is understood to be a
        post on the profile.

        Returns:
            Callable[[~.CreateBlurbRequest],
                    ~.Blurb]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'create_blurb' not in self._stubs:
            self._stubs['create_blurb'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/CreateBlurb',
                request_serializer=messaging.CreateBlurbRequest.serialize,
                response_deserializer=messaging.Blurb.deserialize,
            )
        return self._stubs['create_blurb']

    @property
    def get_blurb(self) -> Callable[
            [messaging.GetBlurbRequest],
            messaging.Blurb]:
        r"""Return a callable for the get blurb method over gRPC.

        Retrieves the Blurb with the given resource name.

        Returns:
            Callable[[~.GetBlurbRequest],
                    ~.Blurb]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'get_blurb' not in self._stubs:
            self._stubs['get_blurb'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/GetBlurb',
                request_serializer=messaging.GetBlurbRequest.serialize,
                response_deserializer=messaging.Blurb.deserialize,
            )
        return self._stubs['get_blurb']

    @property
    def update_blurb(self) -> Callable[
            [messaging.UpdateBlurbRequest],
            messaging.Blurb]:
        r"""Return a callable for the update blurb method over gRPC.

        Updates a blurb.

        Returns:
            Callable[[~.UpdateBlurbRequest],
                    ~.Blurb]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'update_blurb' not in self._stubs:
            self._stubs['update_blurb'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/UpdateBlurb',
                request_serializer=messaging.UpdateBlurbRequest.serialize,
                response_deserializer=messaging.Blurb.deserialize,
            )
        return self._stubs['update_blurb']

    @property
    def delete_blurb(self) -> Callable[
            [messaging.DeleteBlurbRequest],
            empty.Empty]:
        r"""Return a callable for the delete blurb method over gRPC.

        Deletes a blurb.

        Returns:
            Callable[[~.DeleteBlurbRequest],
                    ~.Empty]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'delete_blurb' not in self._stubs:
            self._stubs['delete_blurb'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/DeleteBlurb',
                request_serializer=messaging.DeleteBlurbRequest.serialize,
                response_deserializer=empty.Empty.FromString,
            )
        return self._stubs['delete_blurb']

    @property
    def list_blurbs(self) -> Callable[
            [messaging.ListBlurbsRequest],
            messaging.ListBlurbsResponse]:
        r"""Return a callable for the list blurbs method over gRPC.

        Lists blurbs for a specific chat room or user profile
        depending on the parent resource name.

        Returns:
            Callable[[~.ListBlurbsRequest],
                    ~.ListBlurbsResponse]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'list_blurbs' not in self._stubs:
            self._stubs['list_blurbs'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/ListBlurbs',
                request_serializer=messaging.ListBlurbsRequest.serialize,
                response_deserializer=messaging.ListBlurbsResponse.deserialize,
            )
        return self._stubs['list_blurbs']

    @property
    def search_blurbs(self) -> Callable[
            [messaging.SearchBlurbsRequest],
            operations.Operation]:
        r"""Return a callable for the search blurbs method over gRPC.

        This method searches through all blurbs across all
        rooms and profiles for blurbs containing to words found
        in the query. Only posts that contain an exact match of
        a queried word will be returned.

        Returns:
            Callable[[~.SearchBlurbsRequest],
                    ~.Operation]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'search_blurbs' not in self._stubs:
            self._stubs['search_blurbs'] = self.grpc_channel.unary_unary(
                '/google.showcase.v1beta1.Messaging/SearchBlurbs',
                request_serializer=messaging.SearchBlurbsRequest.serialize,
                response_deserializer=operations.Operation.FromString,
            )
        return self._stubs['search_blurbs']

    @property
    def stream_blurbs(self) -> Callable[
            [messaging.StreamBlurbsRequest],
            messaging.StreamBlurbsResponse]:
        r"""Return a callable for the stream blurbs method over gRPC.

        This returns a stream that emits the blurbs that are
        created for a particular chat room or user profile.

        Returns:
            Callable[[~.StreamBlurbsRequest],
                    ~.StreamBlurbsResponse]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'stream_blurbs' not in self._stubs:
            self._stubs['stream_blurbs'] = self.grpc_channel.unary_stream(
                '/google.showcase.v1beta1.Messaging/StreamBlurbs',
                request_serializer=messaging.StreamBlurbsRequest.serialize,
                response_deserializer=messaging.StreamBlurbsResponse.deserialize,
            )
        return self._stubs['stream_blurbs']

    @property
    def send_blurbs(self) -> Callable[
            [messaging.CreateBlurbRequest],
            messaging.SendBlurbsResponse]:
        r"""Return a callable for the send blurbs method over gRPC.

        This is a stream to create multiple blurbs. If an
        invalid blurb is requested to be created, the stream
        will close with an error.

        Returns:
            Callable[[~.CreateBlurbRequest],
                    ~.SendBlurbsResponse]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'send_blurbs' not in self._stubs:
            self._stubs['send_blurbs'] = self.grpc_channel.stream_unary(
                '/google.showcase.v1beta1.Messaging/SendBlurbs',
                request_serializer=messaging.CreateBlurbRequest.serialize,
                response_deserializer=messaging.SendBlurbsResponse.deserialize,
            )
        return self._stubs['send_blurbs']

    @property
    def connect(self) -> Callable[
            [messaging.ConnectRequest],
            messaging.StreamBlurbsResponse]:
        r"""Return a callable for the connect method over gRPC.

        This method starts a bidirectional stream that
        receives all blurbs that are being created after the
        stream has started and sends requests to create blurbs.
        If an invalid blurb is requested to be created, the
        stream will close with an error.

        Returns:
            Callable[[~.ConnectRequest],
                    ~.StreamBlurbsResponse]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if 'connect' not in self._stubs:
            self._stubs['connect'] = self.grpc_channel.stream_stream(
                '/google.showcase.v1beta1.Messaging/Connect',
                request_serializer=messaging.ConnectRequest.serialize,
                response_deserializer=messaging.StreamBlurbsResponse.deserialize,
            )
        return self._stubs['connect']


__all__ = (
    'MessagingGrpcTransport',
)
